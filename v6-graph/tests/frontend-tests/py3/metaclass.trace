{"code": "class Metaclass(type):\n    def __new__(mcs, name, bases, dict_):\n        print(\"__NEW__\")\n        cls = super(Metaclass, mcs).__new__(mcs, name, bases, dict_)\n        return cls\n\n    def __init__(cls, name, bases, dict_):\n        print(\"__INIT__\")\n        super(Metaclass, cls).__init__(name, bases, dict_)\n\n    def __call__(cls, *args):\n        print(\"__CALL__\")\n        obj = super(Metaclass, cls).__call__(*args)\n        return obj\n\nclass MyObj(object):\n    __metaclass__ = Metaclass\n\nMyObj()", "trace": [{"line": 1, "event": "step_line", "func_name": "<module>", "globals": {}, "ordered_globals": [], "stack_to_render": [], "heap": {}, "stdout": ""}, {"line": 16, "event": "step_line", "func_name": "<module>", "globals": {"Metaclass": ["REF", 1]}, "ordered_globals": ["Metaclass"], "stack_to_render": [], "heap": {"1": ["CLASS", "Metaclass", ["type"], ["__call__", ["REF", 2]], ["__init__", ["REF", 3]], ["__new__", ["REF", 4]]], "2": ["FUNCTION", "__call__(cls, *args)", null], "3": ["FUNCTION", "__init__(cls, name, bases, dict_)", null], "4": ["INSTANCE", "staticmethod"]}, "stdout": ""}, {"line": 19, "event": "step_line", "func_name": "<module>", "globals": {"Metaclass": ["REF", 1], "MyObj": ["REF", 5]}, "ordered_globals": ["Metaclass", "MyObj"], "stack_to_render": [], "heap": {"1": ["CLASS", "Metaclass", ["type"], ["__call__", ["REF", 2]], ["__init__", ["REF", 3]], ["__new__", ["REF", 4]]], "2": ["FUNCTION", "__call__(cls, *args)", null], "3": ["FUNCTION", "__init__(cls, name, bases, dict_)", null], "4": ["INSTANCE", "staticmethod"], "5": ["CLASS", "MyObj", [], ["__metaclass__", ["REF", 1]]]}, "stdout": ""}, {"line": 19, "event": "return", "func_name": "<module>", "globals": {"Metaclass": ["REF", 1], "MyObj": ["REF", 5]}, "ordered_globals": ["Metaclass", "MyObj"], "stack_to_render": [], "heap": {"1": ["CLASS", "Metaclass", ["type"], ["__call__", ["REF", 2]], ["__init__", ["REF", 3]], ["__new__", ["REF", 4]]], "2": ["FUNCTION", "__call__(cls, *args)", null], "3": ["FUNCTION", "__init__(cls, name, bases, dict_)", null], "4": ["INSTANCE", "staticmethod"], "5": ["CLASS", "MyObj", [], ["__metaclass__", ["REF", 1]]]}, "stdout": ""}]}