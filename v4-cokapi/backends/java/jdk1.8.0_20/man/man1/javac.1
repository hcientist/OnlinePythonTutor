'\" t
.\" Copyright (c) 1994, 2014, Oracle and/or its affiliates. All rights reserved.
.\"
.\" Title: javac
.\" Language: English
.\" Date: 8 August 2014
.\" SectDesc: Basic Tools
.\" Software: JDK 8
.\" Arch: generic
.\" Part Number: E38209-03
.\"
.if n .pl 99999
.TH "javac" "1" "8 August 2014" "JDK 8" "Basic Tools"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
javac \- Reads Java class and interface definitions and compiles them into bytecode and class files\&.
.SH "SYNOPSIS"
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac\fR [ \fIoptions\fR ] [ \fIsourcefiles\fR ] [ \fIclasses\fR] [ \fI@argfiles\fR ]
.fi
.if n \{\
.RE
.\}
.PP
Arguments can be in any order:
.PP
\fIoptions\fR
.RS 4
Command\-line options\&. See Options\&.
.RE
.PP
\fIsourcefiles\fR
.RS 4
One or more source files to be compiled (such as
\fBMyClass\&.java\fR)\&.
.RE
.PP
\fIclasses\fR
.RS 4
One or more classes to be processed for annotations (such as
\fBMyPackage\&.MyClass\fR)\&.
.RE
.PP
\fI@argfiles\fR
.RS 4
One or more files that list options and source files\&. The
\fB\-J\fR
options are not allowed in these files\&. See Command\-Line Argument Files\&.
.RE
.SH "DESCRIPTION"
.PP
The
\fBjavac\fR
command reads class and interface definitions, written in the Java programming language, and compiles them into bytecode class files\&. The
\fBjavac\fR
command can also process annotations in Java source files and classes\&.
.PP
There are two ways to pass source code file names to
\fBjavac\fR\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For a small number of source files, list the file names on the command line\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For a large number of source files, list the file names in a file that is separated by blanks or line breaks\&. Use the list file name preceded by an at sign (@) with the
\fBjavac\fR
command\&.
.RE
.PP
Source code file names must have \&.java suffixes, class file names must have \&.class suffixes, and both source and class files must have root names that identify the class\&. For example, a class called
\fBMyClass\fR
would be written in a source file called
\fBMyClass\&.java\fR
and compiled into a bytecode class file called
\fBMyClass\&.class\fR\&.
.PP
Inner class definitions produce additional class files\&. These class files have names that combine the inner and outer class names, such as
\fBMyClass$MyInnerClass\&.class\fR\&.
.PP
Arrange source files in a directory tree that reflects their package tree\&. For example, if all of your source files are in
\fB/workspace\fR, then put the source code for
\fBcom\&.mysoft\&.mypack\&.MyClass\fR
in
\fB/workspace/com/mysoft/mypack/MyClass\&.java\fR\&.
.PP
By default, the compiler puts each class file in the same directory as its source file\&. You can specify a separate destination directory with the
\fB\-d\fR
option\&.
.SH "OPTIONS"
.PP
The compiler has a set of standard options that are supported on the current development environment\&. An additional set of nonstandard options are specific to the current virtual machine and compiler implementations and are subject to change in the future\&. Nonstandard options begin with the
\fB\-X\fR
option\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
See also Cross\-Compilation Options
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
See also Nonstandard Options
.RE
.SS "Standard Options"
.PP
\-A\fIkey\fR[\fI=value\fR]
.RS 4
Specifies options to pass to annotation processors\&. These options are not interpreted by
\fBjavac\fR
directly, but are made available for use by individual processors\&. The
\fBkey\fR
value should be one or more identifiers separated by a dot (\&.)\&.
.RE
.PP
\-cp \fIpath\fR or \-classpath \fIpath\fR
.RS 4
Specifies where to find user class files, and (optionally) annotation processors and source files\&. This class path overrides the user class path in the
\fBCLASSPATH\fR
environment variable\&. If neither
\fBCLASSPATH\fR,
\fB\-cp\fR
nor
\fB\-classpath\fR
is specified, then the user
\fIclass path\fR
is the current directory\&. See Setting the Class Path \&.
.sp
If the
\fB\-sourcepath\fR
option is not specified, then the user class path is also searched for source files\&.
.sp
If the
\fB\-processorpath\fR
option is not specified, then the class path is also searched for annotation processors\&.
.RE
.PP
\-Djava\&.ext\&.dirs=\fIdirectories\fR
.RS 4
Overrides the location of installed extensions\&.
.RE
.PP
\-Djava\&.endorsed\&.dirs=\fIdirectories\fR
.RS 4
Overrides the location of the endorsed standards path\&.
.RE
.PP
\-d \fIdirectory\fR
.RS 4
Sets the destination directory for class files\&. The directory must already exist because
\fBjavac\fR
does not create it\&. If a class is part of a package, then
\fBjavac\fR
puts the class file in a subdirectory that reflects the package name and creates directories as needed\&.
.sp
If you specify
\fB\-d\fR
\fB/home/myclasses\fR
and the class is called
\fBcom\&.mypackage\&.MyClass\fR, then the class file is
\fB/home/myclasses/com/mypackage/MyClass\&.class\fR\&.
.sp
If the
\fI\-d\fR
option is not specified, then
\fBjavac\fR
puts each class file in the same directory as the source file from which it was generated\&.
.sp
\fBNote:\fR
The directory specified by the
\fI\-d\fR
option is not automatically added to your user class path\&.
.RE
.PP
\-deprecation
.RS 4
Shows a description of each use or override of a deprecated member or class\&. Without the
\fB\-deprecation\fR
option,
\fBjavac\fR
shows a summary of the source files that use or override deprecated members or classes\&. The
\fB\-deprecation\fR
option is shorthand for
\fB\-Xlint:deprecation\fR\&.
.RE
.PP
\-encoding \fIencoding\fR
.RS 4
Sets the source file encoding name, such as EUC\-JP and UTF\-8\&. If the
\fB\-encoding\fR
option is not specified, then the platform default converter is used\&.
.RE
.PP
\-endorseddirs \fIdirectories\fR
.RS 4
Overrides the location of the endorsed standards path\&.
.RE
.PP
\-extdirs \fIdirectories\fR
.RS 4
Overrides the location of the
\fBext\fR
directory\&. The directories variable is a colon\-separated list of directories\&. Each JAR file in the specified directories is searched for class files\&. All JAR files found become part of the class path\&.
.sp
If you are cross\-compiling (compiling classes against bootstrap and extension classes of a different Java platform implementation), then this option specifies the directories that contain the extension classes\&. See Cross\-Compilation Options for more information\&.
.RE
.PP
\-g
.RS 4
Generates all debugging information, including local variables\&. By default, only line number and source file information is generated\&.
.RE
.PP
\-g:none
.RS 4
Does not generate any debugging information\&.
.RE
.PP
\-g:[\fIkeyword list\fR]
.RS 4
Generates only some kinds of debugging information, specified by a comma separated list of keywords\&. Valid keywords are:
.PP
source
.RS 4
Source file debugging information\&.
.RE
.PP
lines
.RS 4
Line number debugging information\&.
.RE
.PP
vars
.RS 4
Local variable debugging information\&.
.RE
.RE
.PP
\-help
.RS 4
Prints a synopsis of standard options\&.
.RE
.PP
\-implicit:[\fIclass, none\fR]
.RS 4
Controls the generation of class files for implicitly loaded source files\&. To automatically generate class files, use
\fB\-implicit:class\fR\&. To suppress class file generation, use
\fB\-implicit:none\fR\&. If this option is not specified, then the default is to automatically generate class files\&. In this case, the compiler issues a warning if any such class files are generated when also doing annotation processing\&. The warning is not issued when the
\fB\-implicit\fR
option is set explicitly\&. See Searching for Types\&.
.RE
.PP
\-J\fIoption\fR
.RS 4
Passes
\fBoption\fR
to the Java Virtual Machine (JVM), where option is one of the options described on the reference page for the Java launcher\&. For example,
\fB\-J\-Xms48m\fR
sets the startup memory to 48 MB\&. See
java(1)\&.
.sp
\fBNote:\fR
The
\fICLASSPATH\fR,
\fB\-classpath\fR,
\fB\-bootclasspath\fR, and
\fB\-extdirs\fR
options do not specify the classes used to run
\fBjavac\fR\&. Trying to customize the compiler implementation with these options and variables is risky and often does not accomplish what you want\&. If you must customize the complier implementation, then use the
\fB\-J\fR
option to pass options through to the underlying Java launcher\&.
.RE
.PP
\-nowarn
.RS 4
Disables warning messages\&. This option operates the same as the
\fB\-Xlint:none\fR
option\&.
.RE
.PP
\-parameters
.RS 4
Stores formal parameter names of constructors and methods in the generated class file so that the method
\fBjava\&.lang\&.reflect\&.Executable\&.getParameters\fR
from the Reflection API can retrieve them\&.
.RE
.PP
\-proc: [\fInone\fR, \fIonly\fR]
.RS 4
Controls whether annotation processing and compilation are done\&.
\fB\-proc:none\fR
means that compilation takes place without annotation processing\&.
\fB\-proc:only\fR
means that only annotation processing is done, without any subsequent compilation\&.
.RE
.PP
\-processor \fIclass1\fR [,\fIclass2\fR,\fIclass3\fR\&.\&.\&.]
.RS 4
Names of the annotation processors to run\&. This bypasses the default discovery process\&.
.RE
.PP
\-processorpath \fIpath\fR
.RS 4
Specifies where to find annotation processors\&. If this option is not used, then the class path is searched for processors\&.
.RE
.PP
\-s \fIdir\fR
.RS 4
Specifies the directory where to place the generated source files\&. The directory must already exist because
\fBjavac\fR
does not create it\&. If a class is part of a package, then the compiler puts the source file in a subdirectory that reflects the package name and creates directories as needed\&.
.sp
If you specify
\fB\-s /home/mysrc\fR
and the class is called
\fBcom\&.mypackage\&.MyClass\fR, then the source file is put in
\fB/home/mysrc/com/mypackage/MyClass\&.java\fR\&.
.RE
.PP
\-source \fIrelease\fR
.RS 4
Specifies the version of source code accepted\&. The following values for
\fBrelease\fR
are allowed:
.PP
1\&.3
.RS 4
The compiler does not support assertions, generics, or other language features introduced after Java SE 1\&.3\&.
.RE
.PP
1\&.4
.RS 4
The compiler accepts code containing assertions, which were introduced in Java SE 1\&.4\&.
.RE
.PP
1\&.5
.RS 4
The compiler accepts code containing generics and other language features introduced in Java SE 5\&.
.RE
.PP
5
.RS 4
Synonym for 1\&.5\&.
.RE
.PP
1\&.6
.RS 4
No language changes were introduced in Java SE 6\&. However, encoding errors in source files are now reported as errors instead of warnings as in earlier releases of Java Platform, Standard Edition\&.
.RE
.PP
6
.RS 4
Synonym for 1\&.6\&.
.RE
.PP
1\&.7
.RS 4
The compiler accepts code with features introduced in Java SE 7\&.
.RE
.PP
7
.RS 4
Synonym for 1\&.7\&.
.RE
.PP
1\&.8
.RS 4
This is the default value\&. The compiler accepts code with features introduced in Java SE 8\&.
.RE
.PP
8
.RS 4
Synonym for 1\&.8\&.
.RE
.RE
.PP
\-sourcepath \fIsourcepath\fR
.RS 4
Specifies the source code path to search for class or interface definitions\&. As with the user class path, source path entries are separated by colons (:) on Oracle Solaris and semicolons on Windows and can be directories, JAR archives, or ZIP archives\&. If packages are used, then the local path name within the directory or archive must reflect the package name\&.
.sp
\fBNote:\fR
Classes found through the class path might be recompiled when their source files are also found\&. See Searching for Types\&.
.RE
.PP
\-verbose
.RS 4
Uses verbose output, which includes information about each class loaded and each source file compiled\&.
.RE
.PP
\-version
.RS 4
Prints release information\&.
.RE
.PP
\-werror
.RS 4
Terminates compilation when warnings occur\&.
.RE
.PP
\-X
.RS 4
Displays information about nonstandard options and exits\&.
.RE
.SS "Cross\-Compilation Options"
.PP
By default, classes are compiled against the bootstrap and extension classes of the platform that
\fBjavac\fR
shipped with\&. But
\fBjavac\fR
also supports cross\-compiling, where classes are compiled against a bootstrap and extension classes of a different Java platform implementation\&. It is important to use the
\fB\-bootclasspath\fR
and
\fB\-extdirs\fR
options when cross\-compiling\&.
.PP
\-target \fIversion\fR
.RS 4
Generates class files that target a specified release of the virtual machine\&. Class files will run on the specified target and on later releases, but not on earlier releases of the JVM\&. Valid targets are 1\&.1, 1\&.2, 1\&.3, 1\&.4, 1\&.5 (also 5), 1\&.6 (also 6), 1\&.7 (also 7), and 1\&.8 (also 8)\&.
.sp
The default for the
\fB\-target\fR
option depends on the value of the
\fB\-source\fR
option:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is not specified, then the value of the
\fB\-target\fR
option is 1\&.8
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is 1\&.2, then the value of the
\fB\-target\fR
option is 1\&.4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is 1\&.3, then the value of the
\fB\-target\fR
option is 1\&.4
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is 1\&.5, then the value of the
\fB\-target\fR
option is 1\&.8
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is 1\&.6, then the value of the
\fB\-target\fR
is option 1\&.8
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If the
\fB\-source\fR
option is 1\&.7, then the value of the
\fB\-target\fR
is option 1\&.8
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For all other values of the
\fB\-source\fR
option, the value of the
\fB\-target\fR
option is the value of the
\fB\-source\fR
option\&.
.RE
.RE
.PP
\-bootclasspath \fIbootclasspath\fR
.RS 4
Cross\-compiles against the specified set of boot classes\&. As with the user class path, boot class path entries are separated by colons (:) and can be directories, JAR archives, or ZIP archives\&.
.RE
.SS "Compact Profile Option"
.PP
Beginning with JDK 8, the
\fBjavac\fR
compiler supports compact profiles\&. With compact profiles, applications that do not require the entire Java platform can be deployed and run with a smaller footprint\&. The compact profiles feature could be used to shorten the download time for applications from app stores\&. This feature makes for more compact deployment of Java applications that bundle the JRE\&. This feature is also useful in small devices\&.
.PP
The supported profile values are
\fBcompact1\fR,
\fBcompact2\fR, and
\fBcompact3\fR\&. These are additive layers\&. Each higher\-numbered compact profile contains all of the APIs in profiles with smaller number names\&.
.PP
\-profile
.RS 4
When using compact profiles, this option specifies the profile name when compiling\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-profile compact1 Hello\&.java\fR
 
.fi
.if n \{\
.RE
.\}
javac does not compile source code that uses any Java SE APIs that is not in the specified profile\&. Here is an example of the error message that results from attempting to compile such source code:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBcd jdk1\&.8\&.0/bin\fR
\fB\&./javac \-profile compact1 Paint\&.java\fR
\fBPaint\&.java:5: error: Applet is not available in profile \*(Aqcompact1\*(Aq\fR
\fBimport java\&.applet\&.Applet;\fR
 
.fi
.if n \{\
.RE
.\}
In this example, you can correct the error by modifying the source to not use the
\fBApplet\fR
class\&. You could also correct the error by compiling without the \-profile option\&. Then the compilation would be run against the full set of Java SE APIs\&. (None of the compact profiles include the
\fBApplet\fR
class\&.)
.sp
An alternative way to compile with compact profiles is to use the
\fB\-bootclasspath\fR
option to specify a path to an
\fBrt\&.jar\fR
file that specifies a profile\*(Aqs image\&. Using the
\fB\-profile\fR
option instead does not require a profile image to be present on the system at compile time\&. This is useful when cross\-compiling\&.
.RE
.SS "Nonstandard Options"
.PP
\-Xbootclasspath/p:\fIpath\fR
.RS 4
Adds a suffix to the bootstrap class path\&.
.RE
.PP
\-Xbootclasspath/a:\fIpath\fR
.RS 4
Adds a prefix to the bootstrap class path\&.
.RE
.PP
\-Xbootclasspath/:\fIpath\fR
.RS 4
Overrides the location of the bootstrap class files\&.
.RE
.PP
\-Xdoclint:[\-]\fIgroup\fR [\fI/access\fR]
.RS 4
Enables or disables specific groups of checks, where
\fIgroup\fR
is one of the following values:
\fBaccessibility\fR,
\fBsyntax\fR,
\fBreference\fR,
\fBhtml\fR
or
\fBmissing\fR\&. For more information about these groups of checks see the
\fB\-Xdoclint\fR
option of the
\fBjavadoc\fR
command\&. The
\fB\-Xdoclint\fR
option is disabled by default in the
\fBjavac\fR
command\&.
.sp
The variable
\fIaccess\fR
specifies the minimum visibility level of classes and members that the
\fB\-Xdoclint\fR
option checks\&. It can have one of the following values (in order of most to least visible) :
\fBpublic\fR,
\fBprotected\fR,
\fBpackage\fR
and
\fBprivate\fR\&. For example, the following option checks classes and members (with all groups of checks) that have the access level protected and higher (which includes protected, package and public):
.sp
.if n \{\
.RS 4
.\}
.nf
\fB\-Xdoclint:all/protected\fR
 
.fi
.if n \{\
.RE
.\}
The following option enables all groups of checks for all access levels, except it will not check for HTML errors for classes and members that have access level package and higher (which includes package and public):
.sp
.if n \{\
.RS 4
.\}
.nf
\fB\-Xdoclint:all,\-html/package\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-Xdoclint:none
.RS 4
Disables all groups of checks\&.
.RE
.PP
\-Xdoclint:all[\fI/access\fR]
.RS 4
Enables all groups of checks\&.
.RE
.PP
\-Xlint
.RS 4
Enables all recommended warnings\&. In this release, enabling all available warnings is recommended\&.
.RE
.PP
\-Xlint:all
.RS 4
Enables all recommended warnings\&. In this release, enabling all available warnings is recommended\&.
.RE
.PP
\-Xlint:none
.RS 4
Disables all warnings\&.
.RE
.PP
\-Xlint:\fIname\fR
.RS 4
Disables warning name\&. See Enable or Disable Warnings with the \-Xlint Option for a list of warnings you can disable with this option\&.
.RE
.PP
\-Xlint:\fI\-name\fR
.RS 4
Disables warning name\&. See Enable or Disable Warnings with the \-Xlint Option with the
\fB\-Xlint\fR
option to get a list of warnings that you can disable with this option\&.
.RE
.PP
\-Xmaxerrs \fInumber\fR
.RS 4
Sets the maximum number of errors to print\&.
.RE
.PP
\-Xmaxwarns \fInumber\fR
.RS 4
Sets the maximum number of warnings to print\&.
.RE
.PP
\-Xstdout \fIfilename\fR
.RS 4
Sends compiler messages to the named file\&. By default, compiler messages go to
\fBSystem\&.err\fR\&.
.RE
.PP
\-Xprefer:[\fInewer,source\fR]
.RS 4
Specifies which file to read when both a source file and class file are found for a type\&. (See Searching for Types)\&. If the
\fB\-Xprefer:newer\fR
option is used, then it reads the newer of the source or class file for a type (default)\&. If the
\fB\-Xprefer:source\fR
option is used, then it reads the source file\&. Use \-\fBXprefer:source\fR
when you want to be sure that any annotation processors can access annotations declared with a retention policy of
\fBSOURCE\fR\&.
.RE
.PP
\-Xpkginfo:[\fIalways\fR,\fIlegacy\fR,\fInonempty\fR]
.RS 4
Control whether javac generates
\fBpackage\-info\&.class\fR
files from package\-info\&.java files\&. Possible mode arguments for this option include the following\&.
.PP
always
.RS 4
Always generate a
\fBpackage\-info\&.class\fR
file for every
\fBpackage\-info\&.java\fR
file\&. This option may be useful if you use a build system such as Ant, which checks that each
\fB\&.java\fR
file has a corresponding
\fB\&.class\fR
file\&.
.RE
.PP
legacy
.RS 4
Generate a
\fBpackage\-info\&.class\fR
file only if package\-info\&.java contains annotations\&. Don\*(Aqt generate a
\fBpackage\-info\&.class\fR
file if package\-info\&.java only contains comments\&.
.sp
\fBNote:\fR
A
\fBpackage\-info\&.class\fR
file might be generated but be empty if all the annotations in the package\-info\&.java file have
\fBRetentionPolicy\&.SOURCE\fR\&.
.RE
.PP
nonempty
.RS 4
Generate a
\fBpackage\-info\&.class\fR
file only if package\-info\&.java contains annotations with
\fBRetentionPolicy\&.CLASS\fR
or
\fBRetentionPolicy\&.RUNTIME\fR\&.
.RE
.RE
.PP
\-Xprint
.RS 4
Prints a textual representation of specified types for debugging purposes\&. Perform neither annotation processing nor compilation\&. The format of the output could change\&.
.RE
.PP
\-XprintProcessorInfo
.RS 4
Prints information about which annotations a processor is asked to process\&.
.RE
.PP
\-XprintRounds
.RS 4
Prints information about initial and subsequent annotation processing rounds\&.
.RE
.SH "ENABLE OR DISABLE WARNINGS WITH THE -XLINT OPTION"
.PP
Enable warning
\fIname\fR
with the
\fB\-Xlint:name\fR
option, where
\fBname\fR
is one of the following warning names\&. Note that you can disable a warning with the
\fB\-Xlint:\-name:\fR
option\&.
.PP
cast
.RS 4
Warns about unnecessary and redundant casts, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBString s = (String) "Hello!"\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
classfile
.RS 4
Warns about issues related to class file contents\&.
.RE
.PP
deprecation
.RS 4
Warns about the use of deprecated items, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjava\&.util\&.Date myDate = new java\&.util\&.Date();\fR
\fBint currentDay = myDate\&.getDay();\fR
 
.fi
.if n \{\
.RE
.\}
The method
\fBjava\&.util\&.Date\&.getDay\fR
has been deprecated since JDK 1\&.1
.RE
.PP
dep\-ann
.RS 4
Warns about items that are documented with an
\fB@deprecated\fR
Javadoc comment, but do not have a
\fB@Deprecated\fR
annotation, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fB/**\fR
\fB  * @deprecated As of Java SE 7, replaced by {@link #newMethod()}\fR
\fB  */\fR
\fBpublic static void deprecatedMethood() { }\fR
\fBpublic static void newMethod() { }\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
divzero
.RS 4
Warns about division by the constant integer 0, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBint divideByZero = 42 / 0;\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
empty
.RS 4
Warns about empty statements after
\fBif \fRstatements, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBclass E {\fR
\fB    void m() {\fR
\fB         if (true) ;\fR
\fB    }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
fallthrough
.RS 4
Checks the switch blocks for fall\-through cases and provides a warning message for any that are found\&. Fall\-through cases are cases in a switch block, other than the last case in the block, whose code does not include a break statement, allowing code execution to fall through from that case to the next case\&. For example, the code following the case 1 label in this switch block does not end with a break statement:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBswitch (x) {\fR
\fBcase 1:\fR
\fB  System\&.out\&.println("1");\fR
\fB  // No break statement here\&.\fR
\fBcase 2:\fR
\fB  System\&.out\&.println("2");\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
If the
\fB\-Xlint:fallthrough\fR
option was used when compiling this code, then the compiler emits a warning about possible fall\-through into case, with the line number of the case in question\&.
.RE
.PP
finally
.RS 4
Warns about
\fBfinally\fR
clauses that cannot complete normally, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpublic static int m() {\fR
\fB  try {\fR
\fB     throw new NullPointerException();\fR
\fB  }  catch (NullPointerException(); {\fR
\fB     System\&.err\&.println("Caught NullPointerException\&.");\fR
\fB     return 1;\fR
\fB   } finally {\fR
\fB     return 0;\fR
\fB   }\fR
\fB  }\fR
 
.fi
.if n \{\
.RE
.\}
The compiler generates a warning for the
\fBfinally\fR
block in this example\&. When the
\fBint\fR
method is called, it returns a value of 0\&. A
\fBfinally\fR
block executes when the
\fBtry\fR
block exits\&. In this example, when control is transferred to the
\fBcatch\fR
block, the
\fBint\fR
method exits\&. However, the
\fBfinally\fR
block must execute, so it is executed, even though control was transferred outside the method\&.
.RE
.PP
options
.RS 4
Warns about issues that related to the use of command\-line options\&. See Cross\-Compilation Options\&.
.RE
.PP
overrides
.RS 4
Warns about issues regarding method overrides\&. For example, consider the following two classes:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpublic class ClassWithVarargsMethod {\fR
\fB  void varargsMethod(String\&.\&.\&. s) { }\fR
\fB}\fR
 
\fBpublic class ClassWithOverridingMethod extends ClassWithVarargsMethod {\fR
\fB   @Override\fR
\fB   void varargsMethod(String[] s) { }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
The compiler generates a warning similar to the following:\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBwarning: [override] varargsMethod(String[]) in ClassWithOverridingMethod \fR
\fBoverrides varargsMethod(String\&.\&.\&.) in ClassWithVarargsMethod; overriding\fR
\fBmethod is missing \*(Aq\&.\&.\&.\*(Aq\fR
 
.fi
.if n \{\
.RE
.\}
When the compiler encounters a
\fBvarargs\fR
method, it translates the
\fBvarargs\fR
formal parameter into an array\&. In the method
\fBClassWithVarargsMethod\&.varargsMethod\fR, the compiler translates the
\fBvarargs\fR
formal parameter
\fBString\&.\&.\&. s\fR
to the formal parameter
\fBString[] s\fR, an array, which matches the formal parameter of the method
\fBClassWithOverridingMethod\&.varargsMethod\fR\&. Consequently, this example compiles\&.
.RE
.PP
path
.RS 4
Warns about invalid path elements and nonexistent path directories on the command line (with regard to the class path, the source path, and other paths)\&. Such warnings cannot be suppressed with the
\fB@SuppressWarnings\fR
annotation, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-Xlint:path \-classpath /nonexistentpath Example\&.java\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
processing
.RS 4
Warn about issues regarding annotation processing\&. The compiler generates this warning when you have a class that has an annotation, and you use an annotation processor that cannot handle that type of exception\&. For example, the following is a simple annotation processor:
.sp
\fBSource file AnnocProc\&.java\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBimport java\&.util\&.*;\fR
\fBimport javax\&.annotation\&.processing\&.*;\fR
\fBimport javax\&.lang\&.model\&.*;\fR
\fBimport\&.javaz\&.lang\&.model\&.element\&.*;\fR
 
\fB@SupportedAnnotationTypes("NotAnno")\fR
\fBpublic class AnnoProc extends AbstractProcessor {\fR
\fB  public boolean process(Set<? extends TypeElement> elems, RoundEnvironment renv){\fR
\fB     return true;\fR
\fB  }\fR
 
\fB  public SourceVersion getSupportedSourceVersion() {\fR
\fB     return SourceVersion\&.latest();\fR
\fB   }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
\fBSource file AnnosWithoutProcessors\&.java\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\fB@interface Anno { }\fR
\fB \fR
\fB@Anno\fR
\fBclass AnnosWithoutProcessors { }\fR
 
.fi
.if n \{\
.RE
.\}
The following commands compile the annotation processor
\fBAnnoProc\fR, then run this annotation processor against the source file
\fBAnnosWithoutProcessors\&.java\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac AnnoProc\&.java\fR
\fBjavac \-cp \&. \-Xlint:processing \-processor AnnoProc \-proc:only AnnosWithoutProcessors\&.java\fR
 
.fi
.if n \{\
.RE
.\}
When the compiler runs the annotation processor against the source file
\fBAnnosWithoutProcessors\&.java\fR, it generates the following warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBwarning: [processing] No processor claimed any of these annotations: Anno\fR
\fB \fR
.fi
.if n \{\
.RE
.\}
To resolve this issue, you can rename the annotation defined and used in the class
\fBAnnosWithoutProcessors\fR
from
\fBAnno\fR
to
\fBNotAnno\fR\&.
.RE
.PP
rawtypes
.RS 4
Warns about unchecked operations on raw types\&. The following statement generates a
\fBrawtypes\fR
warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBvoid countElements(List l) { \&.\&.\&. }\fR
 
.fi
.if n \{\
.RE
.\}
The following example does not generate a
\fBrawtypes\fR
warning
.sp
.if n \{\
.RS 4
.\}
.nf
\fBvoid countElements(List<?> l) { \&.\&.\&. }\fR
 
.fi
.if n \{\
.RE
.\}
\fBList\fR
is a raw type\&. However,
\fBList<?>\fR
is an unbounded wildcard parameterized type\&. Because
\fBList\fR
is a parameterized interface, always specify its type argument\&. In this example, the
\fBList\fR
formal argument is specified with an unbounded wildcard (\fB?\fR) as its formal type parameter, which means that the
\fBcountElements\fR
method can accept any instantiation of the
\fBList\fR
interface\&.
.RE
.PP
Serial
.RS 4
Warns about missing
\fBserialVersionUID\fR
definitions on serializable classes, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpublic class PersistentTime implements Serializable\fR
\fB{\fR
\fB  private Date time;\fR
\fB \fR
\fB   public PersistentTime() {\fR
\fB     time = Calendar\&.getInstance()\&.getTime();\fR
\fB   }\fR
\fB \fR
\fB   public Date getTime() {\fR
\fB     return time;\fR
\fB   }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
The compiler generates the following warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBwarning: [serial] serializable class PersistentTime has no definition of\fR
\fBserialVersionUID\fR
 
.fi
.if n \{\
.RE
.\}
If a serializable class does not explicitly declare a field named
\fBserialVersionUID\fR, then the serialization runtime environment calculates a default
\fBserialVersionUID\fR
value for that class based on various aspects of the class, as described in the Java Object Serialization Specification\&. However, it is strongly recommended that all serializable classes explicitly declare
\fBserialVersionUID\fR
values because the default process of computing
\fBserialVersionUID\fR
vales is highly sensitive to class details that can vary depending on compiler implementations, and as a result, might cause an unexpected
\fBInvalidClassExceptions\fR
during deserialization\&. To guarantee a consistent
\fBserialVersionUID\fR
value across different Java compiler implementations, a serializable class must declare an explicit
\fBserialVersionUID\fR
value\&.
.RE
.PP
static
.RS 4
Warns about issues relating to the use of statics, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBclass XLintStatic {\fR
\fB    static void m1() { }\fR
\fB    void m2() { this\&.m1(); }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
The compiler generates the following warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBwarning: [static] static method should be qualified by type name, \fR
\fBXLintStatic, instead of by an expression\fR
 
.fi
.if n \{\
.RE
.\}
To resolve this issue, you can call the
\fBstatic\fR
method
\fBm1\fR
as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBXLintStatic\&.m1();\fR
 
.fi
.if n \{\
.RE
.\}
Alternately, you can remove the
\fBstatic\fR
keyword from the declaration of the method
\fBm1\fR\&.
.RE
.PP
try
.RS 4
Warns about issues relating to use of
\fBtry\fR
blocks, including try\-with\-resources statements\&. For example, a warning is generated for the following statement because the resource
\fBac\fR
declared in the
\fBtry\fR
block is not used:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBtry ( AutoCloseable ac = getResource() ) {    // do nothing}\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
unchecked
.RS 4
Gives more detail for unchecked conversion warnings that are mandated by the Java Language Specification, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBList l = new ArrayList<Number>();\fR
\fBList<String> ls = l;       // unchecked warning\fR
 
.fi
.if n \{\
.RE
.\}
During type erasure, the types
\fBArrayList<Number>\fR
and
\fBList<String>\fR
become
\fBArrayList\fR
and
\fBList\fR, respectively\&.
.sp
The
\fBls\fR
command has the parameterized type
\fBList<String>\fR\&. When the
\fBList\fR
referenced by
\fBl\fR
is assigned to
\fBls\fR, the compiler generates an unchecked warning\&. At compile time, the compiler and JVM cannot determine whether
\fBl\fR
refers to a
\fBList<String>\fR
type\&. In this case,
\fBl\fR
does not refer to a
\fBList<String>\fR
type\&. As a result, heap pollution occurs\&.
.sp
A heap pollution situation occurs when the
\fBList\fR
object
\fBl\fR, whose static type is
\fBList<Number>\fR, is assigned to another
\fBList\fR
object,
\fBls\fR, that has a different static type,
\fBList<String>\fR\&. However, the compiler still allows this assignment\&. It must allow this assignment to preserve backward compatibility with releases of Java SE that do not support generics\&. Because of type erasure,
\fBList<Number>\fR
and
\fBList<String>\fR
both become
\fBList\fR\&. Consequently, the compiler allows the assignment of the object
\fBl\fR\fB,\fR
which has a raw type of
\fBList\fR, to the object
\fBls\fR\&.
.RE
.PP
varargs
.RS 4
Warns about unsafe usages of variable arguments (\fBvarargs\fR) methods, in particular, those that contain non\-reifiable arguments, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpublic class ArrayBuilder {\fR
\fB  public static <T> void addToList (List<T> listArg, T\&.\&.\&. elements) {\fR
\fB    for (T x : elements) {\fR
\fB      listArg\&.add(x);\fR
\fB    }\fR
\fB  }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
\fBNote:\fR
A non\-reifiable type is a type whose type information is not fully available at runtime\&.
.sp
The compiler generates the following warning for the definition of the method
\fBArrayBuilder\&.addToList\fR
.sp
.if n \{\
.RS 4
.\}
.nf
\fBwarning: [varargs] Possible heap pollution from parameterized vararg type T\fR
 
.fi
.if n \{\
.RE
.\}
When the compiler encounters a varargs method, it translates the
\fBvarargs\fR
formal parameter into an array\&. However, the Java programming language does not permit the creation of arrays of parameterized types\&. In the method
\fBArrayBuilder\&.addToList\fR, the compiler translates the
\fBvarargs\fR
formal parameter
\fBT\&.\&.\&.\fR
elements to the formal parameter
\fBT[]\fR
elements, an array\&. However, because of type erasure, the compiler converts the
\fBvarargs\fR
formal parameter to
\fBObject[]\fR
elements\&. Consequently, there is a possibility of heap pollution\&.
.RE
.SH "COMMAND-LINE ARGUMENT FILES"
.PP
To shorten or simplify the
\fBjavac\fR
command, you can specify one or more files that contain arguments to the
\fBjavac\fR
command (except
\fB\-J\fR
options)\&. This enables you to create
\fBjavac\fR
commands of any length on any operating system\&.
.PP
An argument file can include
\fBjavac\fR
options and source file names in any combination\&. The arguments within a file can be separated by spaces or new line characters\&. If a file name contains embedded spaces, then put the whole file name in double quotation marks\&.
.PP
File Names within an argument file are relative to the current directory, not the location of the argument file\&. Wild cards (*) are not allowed in these lists (such as for specifying
\fB*\&.java\fR)\&. Use of the at sign (@) to recursively interpret files is not supported\&. The
\fB\-J\fR
options are not supported because they are passed to the launcher, which does not support argument files\&.
.PP
When executing the
\fBjavac\fR
command, pass in the path and name of each argument file with the at sign (@) leading character\&. When the
\fBjavac\fR
command encounters an argument beginning with the at sign (@), it expands the contents of that file into the argument list\&.
.PP
\fBExample 1\fR
.br
Single Argument File
.RS 4
You could use a single argument file named
\fBargfile\fR
to hold all
\fBjavac\fR
arguments:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac @argfile\fR
 
.fi
.if n \{\
.RE
.\}
This argument file could contain the contents of both files shown in Example 2
.RE
.PP
\fBExample 2\fR
.br
Two Argument Files
.RS 4
You can create two argument files: one for the
\fBjavac\fR
options and the other for the source file names\&. Note that the following lists have no line\-continuation characters\&.
.sp
Create a file named options that contains the following:
.sp
.if n \{\
.RS 4
.\}
.nf
\fB\-d classes\fR
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\fB\-g\fR
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\fB\-sourcepath /java/pubs/ws/1\&.3/src/share/classes\fR
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
 
.fi
.if n \{\
.RE
.\}
Create a file named classes that contains the following:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBMyClass1\&.java\fR
\fBMyClass2\&.java\fR
\fBMyClass3\&.java\fR
 
.fi
.if n \{\
.RE
.\}
Then, run the
\fBjavac\fR
command as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac @options @classes\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBExample 3\fR
.br
Argument Files with Paths
.RS 4
The argument files can have paths, but any file names inside the files are relative to the current working directory (not
\fBpath1\fR
or
\fBpath2\fR):
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac @path1/options @path2/classes\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.SH "ANNOTATION PROCESSING"
.PP
The
\fBjavac\fR
command provides direct support for annotation processing, superseding the need for the separate annotation processing command,
\fBapt\fR\&.
.PP
The API for annotation processors is defined in the
\fBjavax\&.annotation\&.processing\fR
and j\fBavax\&.lang\&.model\fR
packages and subpackages\&.
.SS "How Annotation Processing Works"
.PP
Unless annotation processing is disabled with the
\fB\-proc:none\fR
option, the compiler searches for any annotation processors that are available\&. The search path can be specified with the
\fB\-processorpath\fR
option\&. If no path is specified, then the user class path is used\&. Processors are located by means of service provider\-configuration files named
\fBMETA\-INF/services/javax\&.annotation\&.processing\fR\&.Processor on the search path\&. Such files should contain the names of any annotation processors to be used, listed one per line\&. Alternatively, processors can be specified explicitly, using the
\fB\-processor\fR
option\&.
.PP
After scanning the source files and classes on the command line to determine what annotations are present, the compiler queries the processors to determine what annotations they process\&. When a match is found, the processor is called\&. A processor can claim the annotations it processes, in which case no further attempt is made to find any processors for those annotations\&. After all of the annotations are claimed, the compiler does not search for additional processors\&.
.PP
If any processors generate new source files, then another round of annotation processing occurs: Any newly generated source files are scanned, and the annotations processed as before\&. Any processors called on previous rounds are also called on all subsequent rounds\&. This continues until no new source files are generated\&.
.PP
After a round occurs where no new source files are generated, the annotation processors are called one last time, to give them a chance to complete any remaining work\&. Finally, unless the
\fB\-proc:only\fR
option is used, the compiler compiles the original and all generated source files\&.
.SS "Implicitly Loaded Source Files"
.PP
To compile a set of source files, the compiler might need to implicitly load additional source files\&. See Searching for Types\&. Such files are currently not subject to annotation processing\&. By default, the compiler gives a warning when annotation processing occurred and any implicitly loaded source files are compiled\&. The
\fB\-implicit\fR
option provides a way to suppress the warning\&.
.SH "SEARCHING FOR TYPES"
.PP
To compile a source file, the compiler often needs information about a type, but the type definition is not in the source files specified on the command line\&. The compiler needs type information for every class or interface used, extended, or implemented in the source file\&. This includes classes and interfaces not explicitly mentioned in the source file, but that provide information through inheritance\&.
.PP
For example, when you create a subclass
\fBjava\&.applet\&.Applet\fR, you are also using the ancestor classes of
\fBApplet\fR:
\fBjava\&.awt\&.Panel\fR,
\fBjava\&.awt\&.Container\fR,
\fBjava\&.awt\&.Component\fR, and
\fBjava\&.lang\&.Object\fR\&.
.PP
When the compiler needs type information, it searches for a source file or class file that defines the type\&. The compiler searches for class files first in the bootstrap and extension classes, then in the user class path (which by default is the current directory)\&. The user class path is defined by setting the
\fBCLASSPATH\fR
environment variable or by using the
\fB\-classpath\fR
option\&.
.PP
If you set the
\fB\-sourcepath\fR
option, then the compiler searches the indicated path for source files\&. Otherwise, the compiler searches the user class path for both class files and source files\&.
.PP
You can specify different bootstrap or extension classes with the
\fB\-bootclasspath\fR
and the
\fB\-extdirs\fR
options\&. See Cross\-Compilation Options\&.
.PP
A successful type search may produce a class file, a source file, or both\&. If both are found, then you can use the
\fB\-Xprefer\fR
option to instruct the compiler which to use\&. If
\fBnewer\fR
is specified, then the compiler uses the newer of the two files\&. If
\fBsource\fR
is specified, the compiler uses the source file\&. The default is
\fBnewer\fR\&.
.PP
If a type search finds a source file for a required type, either by itself, or as a result of the setting for the
\fB\-Xprefer\fR
option, then the compiler reads the source file to get the information it needs\&. By default the compiler also compiles the source file\&. You can use the
\fB\-implicit\fR
option to specify the behavior\&. If
\fBnone\fR
is specified, then no class files are generated for the source file\&. If
\fBclass\fR
is specified, then class files are generated for the source file\&.
.PP
The compiler might not discover the need for some type information until after annotation processing completes\&. When the type information is found in a source file and no
\fB\-implicit\fR
option is specified, the compiler gives a warning that the file is being compiled without being subject to annotation processing\&. To disable the warning, either specify the file on the command line (so that it will be subject to annotation processing) or use the
\fB\-implicit\fR
option to specify whether or not class files should be generated for such source files\&.
.SH "PROGRAMMATIC INTERFACE"
.PP
The
\fBjavac\fR
command supports the new Java Compiler API defined by the classes and interfaces in the
\fBjavax\&.tools\fR
package\&.
.SS "Example"
.PP
To compile as though providing command\-line arguments, use the following syntax:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBJavaCompiler javac = ToolProvider\&.getSystemJavaCompiler();\fR
 
.fi
.if n \{\
.RE
.\}
.PP
The example writes diagnostics to the standard output stream and returns the exit code that
\fBjavac\fR
would give when called from the command line\&.
.PP
You can use other methods in the
\fBjavax\&.tools\&.JavaCompiler\fR
interface to handle diagnostics, control where files are read from and written to, and more\&.
.SS "Old Interface"
.PP
\fBNote:\fR
This API is retained for backward compatibility only\&. All new code should use the newer Java Compiler API\&.
.PP
The
\fBcom\&.sun\&.tools\&.javac\&.Main\fR
class provides two static methods to call the compiler from a program:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpublic static int compile(String[] args);\fR
\fBpublic static int compile(String[] args, PrintWriter out);\fR
 
.fi
.if n \{\
.RE
.\}
.PP
The
\fBargs\fR
parameter represents any of the command\-line arguments that would typically be passed to the compiler\&.
.PP
The
\fBout\fR
parameter indicates where the compiler diagnostic output is directed\&.
.PP
The
\fBreturn\fR
value is equivalent to the
\fBexit\fR
value from
\fBjavac\fR\&.
.PP
\fBNote:\fR
All other classes and methods found in a package with names that start with
\fBcom\&.sun\&.tools\&.javac\fR
(subpackages of
\fBcom\&.sun\&.tools\&.javac\fR) are strictly internal and subject to change at any time\&.
.SH "EXAMPLES"
.PP
\fBExample 1\fR
.br
Compile a Simple Program
.RS 4
This example shows how to compile the
\fBHello\&.java\fR
source file in the greetings directory\&. The class defined in
\fBHello\&.java\fR
is called
\fBgreetings\&.Hello\fR\&. The greetings directory is the package directory both for the source file and the class file and is underneath the current directory\&. This makes it possible to use the default user class path\&. It also makes it unnecessary to specify a separate destination directory with the
\fB\-d\fR
option\&.
.sp
The source code in
\fBHello\&.java\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpackage greetings;\fR
\fB \fR
\fBpublic class Hello {\fR
\fB    public static void main(String[] args) {\fR
\fB        for (int i=0; i < args\&.length; i++) {\fR
\fB            System\&.out\&.println("Hello " + args[i]);\fR
\fB        }\fR
\fB    }\fR
\fB}\fR
 
.fi
.if n \{\
.RE
.\}
Compile greetings\&.Hello:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac greetings/Hello\&.java\fR
 
.fi
.if n \{\
.RE
.\}
Run
\fBgreetings\&.Hello\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjava greetings\&.Hello World Universe Everyone\fR
\fBHello World\fR
\fBHello Universe\fR
\fBHello Everyone\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBExample 2\fR
.br
Compile Multiple Source Files
.RS 4
This example compiles the
\fBAloha\&.java\fR,
\fBGutenTag\&.java\fR,
\fBHello\&.java\fR, and
\fBHi\&.java\fR
source files in the
\fBgreetings\fR
package\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fB% javac greetings/*\&.java\fR
\fB% ls greetings\fR
\fBAloha\&.class         GutenTag\&.class      Hello\&.class         Hi\&.class\fR
\fBAloha\&.java          GutenTag\&.java       Hello\&.java          Hi\&.java\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBExample 3\fR
.br
Specify a User Class Path
.RS 4
After changing one of the source files in the previous example, recompile it:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBpwd\fR
\fB/examples\fR
\fBjavac greetings/Hi\&.java\fR
 
.fi
.if n \{\
.RE
.\}
Because
\fBgreetings\&.Hi\fR
refers to other classes in the
\fBgreetings\fR
package, the compiler needs to find these other classes\&. The previous example works because the default user class path is the directory that contains the package directory\&. If you want to recompile this file without concern for which directory you are in, then add the examples directory to the user class path by setting
\fBCLASSPATH\fR\&. This example uses the
\fB\-classpath\fR
option\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-classpath /examples /examples/greetings/Hi\&.java\fR
 
.fi
.if n \{\
.RE
.\}
If you change
\fBgreetings\&.Hi\fR
to use a banner utility, then that utility also needs to be accessible through the user class path\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-classpath /examples:/lib/Banners\&.jar \e\fR
\fB            /examples/greetings/Hi\&.java\fR
 
.fi
.if n \{\
.RE
.\}
To execute a class in the
\fBgreetings\fR
package, the program needs access to the
\fBgreetings\fR
package, and to the classes that the
\fBgreetings\fR
classes use\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjava \-classpath /examples:/lib/Banners\&.jar greetings\&.Hi\fR
 
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBExample 4\fR
.br
Separate Source Files and Class Files
.RS 4
The following example uses
\fBjavac\fR
to compile code that runs on JVM 1\&.7\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-source 1\&.7 \-target 1\&.7 \-bootclasspath jdk1\&.7\&.0/lib/rt\&.jar \e \fR
\fB\-extdirs "" OldCode\&.java\fR
 
.fi
.if n \{\
.RE
.\}
The
\fB\-source 1\&.7\fR
option specifies that release 1\&.7 (or 7) of the Java programming language be used to compile
\fBOldCode\&.java\fR\&. The option
\fB\-target 1\&.7\fR
option ensures that the generated class files are compatible with JVM 1\&.7\&. Note that in most cases, the value of the
\fB\-target\fR
option is the value of the
\fB\-source\fR
option; in this example, you can omit the
\fB\-target\fR
option\&.
.sp
You must specify the
\fB\-bootclasspath\fR
option to specify the correct version of the bootstrap classes (the
\fBrt\&.jar\fR
library)\&. If not, then the compiler generates a warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-source 1\&.7 OldCode\&.java\fR
\fBwarning: [options] bootstrap class path not set in conjunction with \fR
\fB\-source 1\&.7\fR
 
.fi
.if n \{\
.RE
.\}
If you do not specify the correct version of bootstrap classes, then the compiler uses the old language rules (in this example, it uses version 1\&.7 of the Java programming language) combined with the new bootstrap classes, which can result in class files that do not work on the older platform (in this case, Java SE 7) because reference to nonexistent methods can get included\&.
.RE
.PP
\fBExample 5\fR
.br
Cross Compile
.RS 4
This example uses
\fBjavac\fR
to compile code that runs on JVM 1\&.7\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-source 1\&.7 \-target 1\&.7 \-bootclasspath jdk1\&.7\&.0/lib/rt\&.jar \e\fR
\fB            \-extdirs "" OldCode\&.java\fR
 
.fi
.if n \{\
.RE
.\}
The\fB \-source 1\&.7\fR
option specifies that release 1\&.7 (or 7) of the Java programming language to be used to compile OldCode\&.java\&. The
\fB\-target 1\&.7\fR
option ensures that the generated class files are compatible with JVM 1\&.7\&. In most cases, the value of the
\fB\-target\fR
is the value of
\fB\-source\fR\&. In this example, the
\fB\-target\fR
option is omitted\&.
.sp
You must specify the
\fB\-bootclasspath\fR
option to specify the correct version of the bootstrap classes (the
\fBrt\&.jar\fR
library)\&. If not, then the compiler generates a warning:
.sp
.if n \{\
.RS 4
.\}
.nf
\fBjavac \-source 1\&.7 OldCode\&.java\fR
\fBwarning: [options] bootstrap class path not set in conjunction with \-source 1\&.7\fR
 
.fi
.if n \{\
.RE
.\}
If you do not specify the correct version of bootstrap classes, then the compiler uses the old language rules combined with the new bootstrap classes\&. This combination can result in class files that do not work on the older platform (in this case, Java SE 7) because reference to nonexistent methods can get included\&. In this example, the compiler uses release 1\&.7 of the Java programming language\&.
.RE
.SH "SEE ALSO"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
java(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
jdb(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
javah(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
javadoc(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
jar(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
jdb(1)
.RE
.br
'pl 8.5i
'bp
