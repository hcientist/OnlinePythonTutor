{ code: 'function foo() {\n    return \'hello\';\n}\n\n// display ordinary properties of functions\nfoo.prop1 = 42;\nfoo.prop2 = \'why?\';\n\nconsole.log(foo.prop1, foo.prop2);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ] },
       ordered_globals: [ 'foo' ],
       line: 6,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n    return \'hello\';\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ] },
       ordered_globals: [ 'foo' ],
       line: 7,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n    return \'hello\';\n}',
             [ [ 'prop1', 42 ] ],
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ] },
       ordered_globals: [ 'foo' ],
       line: 9,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n    return \'hello\';\n}',
             [ [ 'prop1', 42 ], [ 'prop2', 'why?' ] ],
             null ] } },
     { stdout: '42 \'why?\'\n',
       func_name: '',
       stack_to_render: [],
       globals: { foo: [ 'REF', 1 ] },
       ordered_globals: [ 'foo' ],
       line: 9,
       col: 34,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'foo',
             'function foo() {\n    return \'hello\';\n}',
             [ [ 'prop1', 42 ], [ 'prop2', 'why?' ] ],
             null ] } } ] }
