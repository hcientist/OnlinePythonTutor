{ code: 'var nTimes = 0; // for determinism\n\nfunction MultiplicatorUnitFailure() {}\n\nfunction primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}\n\nfunction reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}\n\nconsole.log(reliableMultiply(8, 8));\n// â†’ 64',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { nTimes: [ 'JS_SPECIAL_VAL', 'undefined' ],
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 1,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { nTimes: 0,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 25,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'reliableMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 0,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 17,
       col: 6,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 0,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 0,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 1,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f4',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 4 ], __return__: [ 'REF', 4 ] } } ],
       globals: 
        { nTimes: 1,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '4': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 1,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 1,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 1,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 2,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f5',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 5 ], __return__: [ 'REF', 5 ] } } ],
       globals: 
        { nTimes: 2,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '5': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 2,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 2,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 2,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 3,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f6',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 6 ], __return__: [ 'REF', 6 ] } } ],
       globals: 
        { nTimes: 3,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '6': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 3,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 3,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 3,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 4,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 7,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f7',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 7 ], __return__: [ 'REF', 7 ] } } ],
       globals: 
        { nTimes: 4,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '7': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 4,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 4,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 4,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 5,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 8,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f8',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 8 ], __return__: [ 'REF', 8 ] } } ],
       globals: 
        { nTimes: 5,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '8': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 5,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 5,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 5,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 9,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'MultiplicatorUnitFailure',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'MultiplicatorUnitFailure (constructor)',
            frame_id: 9,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'MultiplicatorUnitFailure (constructor)_f9',
            ordered_varnames: [ 'this', '__return__' ],
            encoded_locals: { this: [ 'REF', 9 ], __return__: [ 'REF', 9 ] } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 3,
       col: 37,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ],
          '9': [ 'INSTANCE', '' ] } },
     { exception_msg: '[object Object]',
       stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 10,
       col: 4,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 7,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'primitiveMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b' ],
            encoded_locals: { a: 8, b: 8 } },
          { func_name: 'primitiveMultiply',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'primitiveMultiply_f3',
            ordered_varnames: [ 'a', 'b', '__return__' ],
            encoded_locals: { a: 8, b: 8, __return__: 64 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 7,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'reliableMultiply',
       stack_to_render: 
        [ { func_name: 'reliableMultiply',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'reliableMultiply_f2',
            ordered_varnames: [ 'a', 'b', '__return__' ],
            encoded_locals: { a: 8, b: 8, __return__: 64 } } ],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 23,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 25,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } },
     { stdout: '64\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { nTimes: 6,
          MultiplicatorUnitFailure: [ 'REF', 1 ],
          primitiveMultiply: [ 'REF', 2 ],
          reliableMultiply: [ 'REF', 3 ] },
       ordered_globals: 
        [ 'nTimes',
          'MultiplicatorUnitFailure',
          'primitiveMultiply',
          'reliableMultiply' ],
       line: 26,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'MultiplicatorUnitFailure',
             'function MultiplicatorUnitFailure() {}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'primitiveMultiply',
             'function primitiveMultiply(a, b) {\n  if (nTimes > 5)\n    return a * b;\n  else {\n    nTimes++;\n    throw new MultiplicatorUnitFailure();\n  }\n}',
             null,
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'reliableMultiply',
             'function reliableMultiply(a, b) {\n  for (;;) {\n    try {\n      return primitiveMultiply(a, b);\n    } catch (e) {\n      if (!(e instanceof MultiplicatorUnitFailure))\n        throw e;\n    }\n  }\n}',
             null,
             null ] } } ] }
