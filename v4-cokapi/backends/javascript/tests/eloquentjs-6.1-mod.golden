{ code: 'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nVector.prototype.plus = function(other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n};\n\nVector.prototype.minus = function(other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n};\n\nObject.defineProperty(Vector.prototype, "length", {\n  get: function() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n});\n\nvar v1 = new Vector(1, 2);\nvar v2 = new Vector(2, 3);\nvar v3 = v1.plus(v2);\nconsole.log(v3);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 6,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 10,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 14,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 20,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 5 ], x: 1, y: 2 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': [ 'INSTANCE', '', [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 5 ], x: 1, y: 2 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': [ 'INSTANCE', '', [ 'x', 1 ], [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y', '__return__' ],
            encoded_locals: { this: [ 'REF', 5 ], x: 1, y: 2, __return__: [ 'REF', 5 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 21,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f3',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 6 ], x: 2, y: 3 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': [ 'INSTANCE', '', [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f3',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 6 ], x: 2, y: 3 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': [ 'INSTANCE', '', [ 'x', 2 ], [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f3',
            ordered_varnames: [ 'this', 'x', 'y', '__return__' ],
            encoded_locals: { this: [ 'REF', 6 ], x: 2, y: 3, __return__: [ 'REF', 6 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 22,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'this', 'other' ],
            encoded_locals: { this: [ 'REF', 5 ], other: [ 'REF', 6 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 7,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'this', 'other' ],
            encoded_locals: { this: [ 'REF', 5 ], other: [ 'REF', 6 ] } },
          { func_name: 'Vector (constructor)',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f5',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 7 ], x: 3, y: 5 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': [ 'INSTANCE', '', [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'this', 'other' ],
            encoded_locals: { this: [ 'REF', 5 ], other: [ 'REF', 6 ] } },
          { func_name: 'Vector (constructor)',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f5',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 7 ], x: 3, y: 5 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': [ 'INSTANCE', '', [ 'x', 3 ], [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'this', 'other' ],
            encoded_locals: { this: [ 'REF', 5 ], other: [ 'REF', 6 ] } },
          { func_name: 'Vector (constructor)',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f5',
            ordered_varnames: [ 'this', 'x', 'y', '__return__' ],
            encoded_locals: { this: [ 'REF', 7 ], x: 3, y: 5, __return__: [ 'REF', 7 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 3,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'x', 3 ],
             [ 'y', 5 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: 
        [ { func_name: '',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: '_f4',
            ordered_varnames: [ 'this', 'other', '__return__' ],
            encoded_locals: 
             { this: [ 'REF', 5 ],
               other: [ 'REF', 6 ],
               __return__: [ 'REF', 7 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 8,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'x', 3 ],
             [ 'y', 5 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'REF', 7 ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 23,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'x', 3 ],
             [ 'y', 5 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: 'Vector { x: 3, y: 5 }\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 5 ],
          v2: [ 'REF', 6 ],
          v3: [ 'REF', 7 ] },
       ordered_globals: [ 'Vector', 'v1', 'v2', 'v3' ],
       line: 23,
       col: 16,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': 
           [ 'INSTANCE',
             '',
             [ 'plus', [ 'REF', 3 ] ],
             [ 'minus', [ 'REF', 4 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x - other.x, this.y - other.y);\n}',
             null,
             null ],
          '5': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '6': 
           [ 'INSTANCE',
             '',
             [ 'x', 2 ],
             [ 'y', 3 ],
             [ '__proto__', [ 'REF', 2 ] ] ],
          '7': 
           [ 'INSTANCE',
             '',
             [ 'x', 3 ],
             [ 'y', 5 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } } ] }
