{ code: '// adapted from http://es6-features.org/#SymbolType\nvar x = Symbol("xxx")\nvar y = Symbol("yyy");\nconsole.log(x !== y);\nconst foo = Symbol(\'foo\');\nconst bar = Symbol(\'bar\');\nconsole.log(typeof foo === "symbol");\nconsole.log(typeof bar === "symbol");\nlet obj = {};\nobj[foo] = "foo";\nobj[bar] = "bar";\nconsole.log(JSON.stringify(obj)); // {}\nconsole.log(Object.keys(obj)); // []\nconsole.log(Object.getOwnPropertyNames(obj)); // []\nconsole.log(Object.getOwnPropertySymbols(obj)); // [ foo, bar ]',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'undefined' ],
          y: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'x', 'y' ],
       line: 2,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'x', 'y' ],
       line: 3,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ] },
       ordered_globals: [ 'x', 'y' ],
       line: 4,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ] },
       ordered_globals: [ 'x', 'y' ],
       line: 5,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ] },
       ordered_globals: [ 'x', 'y', 'foo' ],
       line: 6,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar' ],
       line: 7,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar' ],
       line: 8,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\ntrue\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar' ],
       line: 9,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: 'true\ntrue\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 10,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 11,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 12,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n{}\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 13,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n{}\n[]\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 14,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n{}\n[]\n[ \'smallObjId_hidden_\' ]\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 15,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } },
     { stdout: 'true\ntrue\ntrue\n{}\n[]\n[ \'smallObjId_hidden_\' ]\n[ Symbol(foo), Symbol(bar) ]\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { x: [ 'JS_SPECIAL_VAL', 'Symbol(xxx)' ],
          y: [ 'JS_SPECIAL_VAL', 'Symbol(yyy)' ],
          foo: [ 'JS_SPECIAL_VAL', 'Symbol(foo)' ],
          bar: [ 'JS_SPECIAL_VAL', 'Symbol(bar)' ],
          obj: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'y', 'foo', 'bar', 'obj' ],
       line: 15,
       col: 63,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE', '' ] } } ] }
