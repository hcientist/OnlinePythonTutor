{ code: '// adapted from OPT Python example\n// Tutorial code from Prof. Peter Wentworth\n// Rhodes University, South Africa (http://www.ru.ac.za/)\n\nfunction f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}\n\nf(4);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 22,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 7,
       col: 8,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 11,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 12,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 13,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 7,
       col: 8,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 11,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 12,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 13,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 7,
       col: 8,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 11,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 12,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 13,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 7,
       col: 8,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 11,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 12,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 13,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } },
          { func_name: 'f',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f6',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 0, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 7,
       col: 8,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } },
          { func_name: 'f',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f6',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 0, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 8,
       col: 10,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { exception_msg: 'Error: DivByZero',
       stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } },
          { func_name: 'f',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f6',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 0, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 8,
       col: 10,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } },
          { func_name: 'f',
            frame_id: 6,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f6',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 0, x: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 18,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\nBye from f where n = 0\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } },
          { func_name: 'f',
            frame_id: 5,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f5',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 1, x: 10 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 18,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\nBye from f where n = 0\nBye from f where n = 1\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } },
          { func_name: 'f',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f4',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 2, x: 5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 18,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\nBye from f where n = 0\nBye from f where n = 1\nBye from f where n = 2\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: false,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } },
          { func_name: 'f',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f3',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 3, x: 3.3333333333333335 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 18,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } },
     { stdout: 'x is 2.5\nx is 3.3333333333333335\nx is 5\nx is 10\nBye from f where n = 0\nBye from f where n = 1\nBye from f where n = 2\nBye from f where n = 3\n',
       func_name: 'f',
       stack_to_render: 
        [ { func_name: 'f',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'f_f2',
            ordered_varnames: [ 'n', 'x' ],
            encoded_locals: { n: 4, x: 2.5 } } ],
       globals: { f: [ 'REF', 1 ] },
       ordered_globals: [ 'f' ],
       line: 18,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'f',
             'function f(n) {\n    try {\n        if (n == 0) {\n          throw new Error(\'DivByZero\');\n        }\n        else {\n          var x = 10 / n;\n          console.log("x is " + x);\n          f(n-1);\n          console.log("survived!");\n        }\n    }\n    finally {\n        console.log("Bye from f where n = " + n);\n    }\n}',
             null,
             null ] } } ] }
