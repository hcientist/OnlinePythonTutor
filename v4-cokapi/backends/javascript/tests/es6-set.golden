{ code: '// adapted from http://es6-features.org/#SetDataStructure\nlet s = new Set();\ns.add("hello").add("goodbye");\ns.add("hello");\ns.add("foo");\ns.delete("foo");\nconsole.log(s.size === 2);\nconsole.log(s.has("hello") === true);\nfor (let key of s.values()) // insertion order\n    console.log(key);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: {},
       ordered_globals: [],
       line: 2,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 3,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 4,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 5,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 6,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye', 'foo' ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 7,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\n',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 8,
       col: 0,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 's', 'key (block 1)' ],
       line: 9,
       col: 18,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 's', 'key (block 1)' ],
       line: 9,
       col: 16,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 's', 'key (block 1)' ],
       line: 9,
       col: 17,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
          'key (block 2)': 'hello' },
       ordered_globals: [ 's', 'key (block 1)', 'key (block 2)' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\nhello\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 's', 'key (block 1)' ],
       line: 9,
       col: 17,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\nhello\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ],
          'key (block 2)': 'goodbye' },
       ordered_globals: [ 's', 'key (block 1)', 'key (block 2)' ],
       line: 10,
       col: 4,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\nhello\ngoodbye\n',
       func_name: '',
       stack_to_render: [],
       globals: 
        { s: [ 'REF', 1 ],
          'key (block 1)': [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 's', 'key (block 1)' ],
       line: 9,
       col: 17,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } },
     { stdout: 'true\ntrue\nhello\ngoodbye\n',
       func_name: '',
       stack_to_render: [],
       globals: { s: [ 'REF', 1 ] },
       ordered_globals: [ 's' ],
       line: 10,
       col: 21,
       event: 'step_line',
       heap: { '1': [ 'SET', 'hello', 'goodbye' ] } } ] }
