{ code: 'try {\n  var x = 5;\n  throw new Error("oh crapo");\n}\ncatch (e) {\n  console.log(\'hello\');\n  console.log(\'caught\');\n}\nfinally {\n  console.log(\'done\');\n}',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { x: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'x' ],
       line: 2,
       col: 2,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5 },
       ordered_globals: [ 'x' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: {} },
     { exception_msg: 'Error: oh crapo',
       stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5 },
       ordered_globals: [ 'x' ],
       line: 3,
       col: 2,
       event: 'exception',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5, e: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'e' ],
       line: 6,
       col: 2,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE_PPRINT', 'object', 'Error: oh crapo' ] } },
     { stdout: 'hello\n',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5, e: [ 'REF', 1 ] },
       ordered_globals: [ 'x', 'e' ],
       line: 7,
       col: 2,
       event: 'step_line',
       heap: { '1': [ 'INSTANCE_PPRINT', 'object', 'Error: oh crapo' ] } },
     { stdout: 'hello\ncaught\n',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5 },
       ordered_globals: [ 'x' ],
       line: 10,
       col: 2,
       event: 'step_line',
       heap: {} },
     { stdout: 'hello\ncaught\ndone\n',
       func_name: '',
       stack_to_render: [],
       globals: { x: 5 },
       ordered_globals: [ 'x' ],
       line: 11,
       col: 1,
       event: 'step_line',
       heap: {} } ] }
