{ code: 'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}\n\nfunction sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}\n\nconsole.log(sum(range(1, 10)));\nconsole.log(range(5, 2, -1));',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 22,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: [ 'JS_SPECIAL_VAL', 'undefined' ],
               array: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: [ 'JS_SPECIAL_VAL', 'undefined' ],
               array: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 2,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: 1,
               array: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: 1,
               array: [ 'REF', 3 ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 5,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: 1,
               array: [ 'REF', 3 ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 9,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST' ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 10 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 10 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 7,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 10 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 11 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 6,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 1, end: 10, step: 1, array: [ 'REF', 3 ], i: 11 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 12,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f2',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i', '__return__' ],
            encoded_locals: 
             { start: 1,
               end: 10,
               step: 1,
               array: [ 'REF', 3 ],
               i: 11,
               __return__: [ 'REF', 3 ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 12,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 22,
       col: 12,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: 
             { array: [ 'REF', 3 ],
               total: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 16,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: 
             { array: [ 'REF', 3 ],
               total: 0,
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 7,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 0, i: 0 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 0, i: 0 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 1, i: 0 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 1, i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 1, i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 3, i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 3, i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 3, i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 6, i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 6, i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 6, i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 10, i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 10, i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 10, i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 15, i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 15, i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 15, i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 21, i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 21, i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 21, i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 28, i: 6 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 28, i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 28, i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 36, i: 7 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 36, i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 36, i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 45, i: 8 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 45, i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 45, i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 18,
       col: 4,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 55, i: 9 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 37,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 55, i: 10 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 17,
       col: 20,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 55, i: 10 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 19,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: 'sum',
       stack_to_render: 
        [ { func_name: 'sum',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'sum_f3',
            ordered_varnames: [ 'array', 'total', 'i', '__return__' ],
            encoded_locals: { array: [ 'REF', 3 ], total: 55, i: 10, __return__: 55 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 19,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '3': [ 'LIST', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 22,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '55\n',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 23,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 5,
               end: 2,
               step: -1,
               array: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 5,
               end: 2,
               step: -1,
               array: [ 'JS_SPECIAL_VAL', 'undefined' ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 5,
               end: 2,
               step: -1,
               array: [ 'REF', 4 ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 5,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST' ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: 
             { start: 5,
               end: 2,
               step: -1,
               array: [ 'REF', 4 ],
               i: [ 'JS_SPECIAL_VAL', 'undefined' ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 9,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST' ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST' ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 10,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST' ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 5 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 10,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 4 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 10,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 3 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 10,
       col: 6,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 2 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 36,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3, 2 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 9,
       col: 26,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3, 2 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i' ],
            encoded_locals: { start: 5, end: 2, step: -1, array: [ 'REF', 4 ], i: 1 } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 12,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3, 2 ] } },
     { stdout: '55\n',
       func_name: 'range',
       stack_to_render: 
        [ { func_name: 'range',
            frame_id: 4,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'range_f4',
            ordered_varnames: [ 'start', 'end', 'step', 'array', 'i', '__return__' ],
            encoded_locals: 
             { start: 5,
               end: 2,
               step: -1,
               array: [ 'REF', 4 ],
               i: 1,
               __return__: [ 'REF', 4 ] } } ],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 12,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ],
          '4': [ 'LIST', 5, 4, 3, 2 ] } },
     { stdout: '55\n',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 23,
       col: 8,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } },
     { stdout: '55\n[ 5, 4, 3, 2 ]\n',
       func_name: '',
       stack_to_render: [],
       globals: { range: [ 'REF', 1 ], sum: [ 'REF', 2 ] },
       ordered_globals: [ 'range', 'sum' ],
       line: 23,
       col: 29,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'range',
             'function range(start, end, step) {\n  if (step == null) step = 1;\n  var array = [];\n\n  if (step > 0) {\n    for (var i = start; i <= end; i += step)\n      array.push(i);\n  } else {\n    for (var i = start; i >= end; i += step)\n      array.push(i);\n  }\n  return array;\n}',
             null,
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'sum',
             'function sum(array) {\n  var total = 0;\n  for (var i = 0; i < array.length; i++)\n    total += array[i];\n  return total;\n}',
             null,
             null ] } } ] }
