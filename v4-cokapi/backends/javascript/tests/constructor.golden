{ code: 'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nVector.prototype.plus = function(other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n};\n\nvar v1 = new Vector(1, 2);\nvar v2 = Vector(20, 30); // whoops, forgot \'new\'',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 6,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 10,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 4 ], x: 1, y: 2 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': [ 'INSTANCE', '', [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y' ],
            encoded_locals: { this: [ 'REF', 4 ], x: 1, y: 2 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 3,
       col: 2,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': [ 'INSTANCE', '', [ 'x', 1 ], [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector (constructor)',
            frame_id: 2,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector (constructor)_f2',
            ordered_varnames: [ 'this', 'x', 'y', '__return__' ],
            encoded_locals: { this: [ 'REF', 4 ], x: 1, y: 2, __return__: [ 'REF', 4 ] } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'JS_SPECIAL_VAL', 'undefined' ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 3,
       col: 0,
       event: 'return',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 4 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 11,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector_f3',
            ordered_varnames: [ 'x', 'y' ],
            encoded_locals: { x: 20, y: 30 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 4 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 2,
       col: 2,
       event: 'call',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } },
     { exception_msg: 'TypeError: Cannot set property \'x\' of undefined',
       stdout: '',
       func_name: 'Vector',
       stack_to_render: 
        [ { func_name: 'Vector',
            frame_id: 3,
            is_highlighted: true,
            is_parent: false,
            is_zombie: false,
            parent_frame_id_list: [],
            unique_hash: 'Vector_f3',
            ordered_varnames: [ 'x', 'y' ],
            encoded_locals: { x: 20, y: 30 } } ],
       globals: 
        { Vector: [ 'REF', 1 ],
          v1: [ 'REF', 4 ],
          v2: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'Vector', 'v1', 'v2' ],
       line: 2,
       col: 9,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'Vector',
             'function Vector(x, y) {\n  this.x = x;\n  this.y = y;\n}',
             [ [ 'prototype', [ 'REF', 2 ] ] ],
             null ],
          '2': [ 'INSTANCE', '', [ 'plus', [ 'REF', 3 ] ] ],
          '3': 
           [ 'JS_FUNCTION',
             '',
             'function (other) {\n  return new Vector(this.x + other.x, this.y + other.y);\n}',
             null,
             null ],
          '4': 
           [ 'INSTANCE',
             '',
             [ 'x', 1 ],
             [ 'y', 2 ],
             [ '__proto__', [ 'REF', 2 ] ] ] } } ] }
