{ code: 'var assert = require(\'assert\');\n\nassert(true);\nassert(true);\nassert(false); // should fail here with an error message\nassert(true);\nassert(true);',
  trace: 
   [ { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { assert: [ 'JS_SPECIAL_VAL', 'undefined' ] },
       ordered_globals: [ 'assert' ],
       line: 1,
       col: 0,
       event: 'step_line',
       heap: {} },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { assert: [ 'REF', 1 ] },
       ordered_globals: [ 'assert' ],
       line: 3,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'ok',
             'function ok(value, message) {\n  if (!value) fail(value, true, message, \'==\', assert.ok);\n}',
             [ [ 'AssertionError', [ 'REF', 2 ] ],
               [ 'fail', [ 'REF', 5 ] ],
               [ 'ok', [ 'REF', 1 ] ],
               [ 'equal', [ 'REF', 6 ] ],
               [ 'notEqual', [ 'REF', 7 ] ],
               [ 'deepEqual', [ 'REF', 8 ] ],
               [ 'deepStrictEqual', [ 'REF', 9 ] ],
               [ 'notDeepEqual', [ 'REF', 10 ] ],
               [ 'notDeepStrictEqual', [ 'REF', 11 ] ],
               [ 'strictEqual', [ 'REF', 12 ] ],
               [ 'notStrictEqual', [ 'REF', 13 ] ],
               [ 'throws', [ 'REF', 14 ] ],
               [ 'doesNotThrow', [ 'REF', 15 ] ],
               [ 'ifError', [ 'REF', 16 ] ] ],
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'AssertionError',
             'function AssertionError(options) {\n  this.name = \'AssertionError\';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  Error.captureStackTrace(this, stackStartFunction);\n}',
             [ [ 'super_', [ 'REF', 3 ] ] ],
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'Error',
             'function Error() { [native code] }',
             [ [ 'captureStackTrace', [ 'REF', 4 ] ],
               [ 'stackTraceLimit', 10 ] ],
             null ],
          '4': 
           [ 'JS_FUNCTION',
             'captureStackTrace',
             'function captureStackTrace() { [native code] }',
             null,
             null ],
          '5': 
           [ 'JS_FUNCTION',
             'fail',
             'function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}',
             null,
             null ],
          '6': 
           [ 'JS_FUNCTION',
             'equal',
             'function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, \'==\', assert.equal);\n}',
             null,
             null ],
          '7': 
           [ 'JS_FUNCTION',
             'notEqual',
             'function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, \'!=\', assert.notEqual);\n  }\n}',
             null,
             null ],
          '8': 
           [ 'JS_FUNCTION',
             'deepEqual',
             'function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'deepEqual\', assert.deepEqual);\n  }\n}',
             null,
             null ],
          '9': 
           [ 'JS_FUNCTION',
             'deepStrictEqual',
             'function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'deepStrictEqual\', assert.deepStrictEqual);\n  }\n}',
             null,
             null ],
          '10': 
           [ 'JS_FUNCTION',
             'notDeepEqual',
             'function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'notDeepEqual\', assert.notDeepEqual);\n  }\n}',
             null,
             null ],
          '11': 
           [ 'JS_FUNCTION',
             'notDeepStrictEqual',
             'function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'notDeepStrictEqual\', notDeepStrictEqual);\n  }\n}',
             null,
             null ],
          '12': 
           [ 'JS_FUNCTION',
             'strictEqual',
             'function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, \'===\', assert.strictEqual);\n  }\n}',
             null,
             null ],
          '13': 
           [ 'JS_FUNCTION',
             'notStrictEqual',
             'function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, \'!==\', assert.notStrictEqual);\n  }\n}',
             null,
             null ],
          '14': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}',
             null,
             null ],
          '15': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}',
             null,
             null ],
          '16': 
           [ 'JS_FUNCTION',
             '',
             'function (err) { if (err) throw err; }',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { assert: [ 'REF', 1 ] },
       ordered_globals: [ 'assert' ],
       line: 4,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'ok',
             'function ok(value, message) {\n  if (!value) fail(value, true, message, \'==\', assert.ok);\n}',
             [ [ 'AssertionError', [ 'REF', 2 ] ],
               [ 'fail', [ 'REF', 5 ] ],
               [ 'ok', [ 'REF', 1 ] ],
               [ 'equal', [ 'REF', 6 ] ],
               [ 'notEqual', [ 'REF', 7 ] ],
               [ 'deepEqual', [ 'REF', 8 ] ],
               [ 'deepStrictEqual', [ 'REF', 9 ] ],
               [ 'notDeepEqual', [ 'REF', 10 ] ],
               [ 'notDeepStrictEqual', [ 'REF', 11 ] ],
               [ 'strictEqual', [ 'REF', 12 ] ],
               [ 'notStrictEqual', [ 'REF', 13 ] ],
               [ 'throws', [ 'REF', 14 ] ],
               [ 'doesNotThrow', [ 'REF', 15 ] ],
               [ 'ifError', [ 'REF', 16 ] ] ],
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'AssertionError',
             'function AssertionError(options) {\n  this.name = \'AssertionError\';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  Error.captureStackTrace(this, stackStartFunction);\n}',
             [ [ 'super_', [ 'REF', 3 ] ] ],
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'Error',
             'function Error() { [native code] }',
             [ [ 'captureStackTrace', [ 'REF', 4 ] ],
               [ 'stackTraceLimit', 10 ] ],
             null ],
          '4': 
           [ 'JS_FUNCTION',
             'captureStackTrace',
             'function captureStackTrace() { [native code] }',
             null,
             null ],
          '5': 
           [ 'JS_FUNCTION',
             'fail',
             'function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}',
             null,
             null ],
          '6': 
           [ 'JS_FUNCTION',
             'equal',
             'function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, \'==\', assert.equal);\n}',
             null,
             null ],
          '7': 
           [ 'JS_FUNCTION',
             'notEqual',
             'function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, \'!=\', assert.notEqual);\n  }\n}',
             null,
             null ],
          '8': 
           [ 'JS_FUNCTION',
             'deepEqual',
             'function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'deepEqual\', assert.deepEqual);\n  }\n}',
             null,
             null ],
          '9': 
           [ 'JS_FUNCTION',
             'deepStrictEqual',
             'function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'deepStrictEqual\', assert.deepStrictEqual);\n  }\n}',
             null,
             null ],
          '10': 
           [ 'JS_FUNCTION',
             'notDeepEqual',
             'function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'notDeepEqual\', assert.notDeepEqual);\n  }\n}',
             null,
             null ],
          '11': 
           [ 'JS_FUNCTION',
             'notDeepStrictEqual',
             'function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'notDeepStrictEqual\', notDeepStrictEqual);\n  }\n}',
             null,
             null ],
          '12': 
           [ 'JS_FUNCTION',
             'strictEqual',
             'function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, \'===\', assert.strictEqual);\n  }\n}',
             null,
             null ],
          '13': 
           [ 'JS_FUNCTION',
             'notStrictEqual',
             'function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, \'!==\', assert.notStrictEqual);\n  }\n}',
             null,
             null ],
          '14': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}',
             null,
             null ],
          '15': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}',
             null,
             null ],
          '16': 
           [ 'JS_FUNCTION',
             '',
             'function (err) { if (err) throw err; }',
             null,
             null ] } },
     { stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { assert: [ 'REF', 1 ] },
       ordered_globals: [ 'assert' ],
       line: 5,
       col: 0,
       event: 'step_line',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'ok',
             'function ok(value, message) {\n  if (!value) fail(value, true, message, \'==\', assert.ok);\n}',
             [ [ 'AssertionError', [ 'REF', 2 ] ],
               [ 'fail', [ 'REF', 5 ] ],
               [ 'ok', [ 'REF', 1 ] ],
               [ 'equal', [ 'REF', 6 ] ],
               [ 'notEqual', [ 'REF', 7 ] ],
               [ 'deepEqual', [ 'REF', 8 ] ],
               [ 'deepStrictEqual', [ 'REF', 9 ] ],
               [ 'notDeepEqual', [ 'REF', 10 ] ],
               [ 'notDeepStrictEqual', [ 'REF', 11 ] ],
               [ 'strictEqual', [ 'REF', 12 ] ],
               [ 'notStrictEqual', [ 'REF', 13 ] ],
               [ 'throws', [ 'REF', 14 ] ],
               [ 'doesNotThrow', [ 'REF', 15 ] ],
               [ 'ifError', [ 'REF', 16 ] ] ],
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'AssertionError',
             'function AssertionError(options) {\n  this.name = \'AssertionError\';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  Error.captureStackTrace(this, stackStartFunction);\n}',
             [ [ 'super_', [ 'REF', 3 ] ] ],
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'Error',
             'function Error() { [native code] }',
             [ [ 'captureStackTrace', [ 'REF', 4 ] ],
               [ 'stackTraceLimit', 10 ] ],
             null ],
          '4': 
           [ 'JS_FUNCTION',
             'captureStackTrace',
             'function captureStackTrace() { [native code] }',
             null,
             null ],
          '5': 
           [ 'JS_FUNCTION',
             'fail',
             'function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}',
             null,
             null ],
          '6': 
           [ 'JS_FUNCTION',
             'equal',
             'function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, \'==\', assert.equal);\n}',
             null,
             null ],
          '7': 
           [ 'JS_FUNCTION',
             'notEqual',
             'function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, \'!=\', assert.notEqual);\n  }\n}',
             null,
             null ],
          '8': 
           [ 'JS_FUNCTION',
             'deepEqual',
             'function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'deepEqual\', assert.deepEqual);\n  }\n}',
             null,
             null ],
          '9': 
           [ 'JS_FUNCTION',
             'deepStrictEqual',
             'function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'deepStrictEqual\', assert.deepStrictEqual);\n  }\n}',
             null,
             null ],
          '10': 
           [ 'JS_FUNCTION',
             'notDeepEqual',
             'function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'notDeepEqual\', assert.notDeepEqual);\n  }\n}',
             null,
             null ],
          '11': 
           [ 'JS_FUNCTION',
             'notDeepStrictEqual',
             'function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'notDeepStrictEqual\', notDeepStrictEqual);\n  }\n}',
             null,
             null ],
          '12': 
           [ 'JS_FUNCTION',
             'strictEqual',
             'function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, \'===\', assert.strictEqual);\n  }\n}',
             null,
             null ],
          '13': 
           [ 'JS_FUNCTION',
             'notStrictEqual',
             'function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, \'!==\', assert.notStrictEqual);\n  }\n}',
             null,
             null ],
          '14': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}',
             null,
             null ],
          '15': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}',
             null,
             null ],
          '16': 
           [ 'JS_FUNCTION',
             '',
             'function (err) { if (err) throw err; }',
             null,
             null ] } },
     { exception_msg: 'AssertionError: false == true',
       stdout: '',
       func_name: '',
       stack_to_render: [],
       globals: { assert: [ 'REF', 1 ] },
       ordered_globals: [ 'assert' ],
       line: 5,
       col: 0,
       event: 'exception',
       heap: 
        { '1': 
           [ 'JS_FUNCTION',
             'ok',
             'function ok(value, message) {\n  if (!value) fail(value, true, message, \'==\', assert.ok);\n}',
             [ [ 'AssertionError', [ 'REF', 2 ] ],
               [ 'fail', [ 'REF', 5 ] ],
               [ 'ok', [ 'REF', 1 ] ],
               [ 'equal', [ 'REF', 6 ] ],
               [ 'notEqual', [ 'REF', 7 ] ],
               [ 'deepEqual', [ 'REF', 8 ] ],
               [ 'deepStrictEqual', [ 'REF', 9 ] ],
               [ 'notDeepEqual', [ 'REF', 10 ] ],
               [ 'notDeepStrictEqual', [ 'REF', 11 ] ],
               [ 'strictEqual', [ 'REF', 12 ] ],
               [ 'notStrictEqual', [ 'REF', 13 ] ],
               [ 'throws', [ 'REF', 14 ] ],
               [ 'doesNotThrow', [ 'REF', 15 ] ],
               [ 'ifError', [ 'REF', 16 ] ] ],
             null ],
          '2': 
           [ 'JS_FUNCTION',
             'AssertionError',
             'function AssertionError(options) {\n  this.name = \'AssertionError\';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  Error.captureStackTrace(this, stackStartFunction);\n}',
             [ [ 'super_', [ 'REF', 3 ] ] ],
             null ],
          '3': 
           [ 'JS_FUNCTION',
             'Error',
             'function Error() { [native code] }',
             [ [ 'captureStackTrace', [ 'REF', 4 ] ],
               [ 'stackTraceLimit', 10 ] ],
             null ],
          '4': 
           [ 'JS_FUNCTION',
             'captureStackTrace',
             'function captureStackTrace() { [native code] }',
             null,
             null ],
          '5': 
           [ 'JS_FUNCTION',
             'fail',
             'function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}',
             null,
             null ],
          '6': 
           [ 'JS_FUNCTION',
             'equal',
             'function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, \'==\', assert.equal);\n}',
             null,
             null ],
          '7': 
           [ 'JS_FUNCTION',
             'notEqual',
             'function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, \'!=\', assert.notEqual);\n  }\n}',
             null,
             null ],
          '8': 
           [ 'JS_FUNCTION',
             'deepEqual',
             'function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'deepEqual\', assert.deepEqual);\n  }\n}',
             null,
             null ],
          '9': 
           [ 'JS_FUNCTION',
             'deepStrictEqual',
             'function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'deepStrictEqual\', assert.deepStrictEqual);\n  }\n}',
             null,
             null ],
          '10': 
           [ 'JS_FUNCTION',
             'notDeepEqual',
             'function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, \'notDeepEqual\', assert.notDeepEqual);\n  }\n}',
             null,
             null ],
          '11': 
           [ 'JS_FUNCTION',
             'notDeepStrictEqual',
             'function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, \'notDeepStrictEqual\', notDeepStrictEqual);\n  }\n}',
             null,
             null ],
          '12': 
           [ 'JS_FUNCTION',
             'strictEqual',
             'function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, \'===\', assert.strictEqual);\n  }\n}',
             null,
             null ],
          '13': 
           [ 'JS_FUNCTION',
             'notStrictEqual',
             'function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, \'!==\', assert.notStrictEqual);\n  }\n}',
             null,
             null ],
          '14': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}',
             null,
             null ],
          '15': 
           [ 'JS_FUNCTION',
             '',
             'function (block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}',
             null,
             null ],
          '16': 
           [ 'JS_FUNCTION',
             '',
             'function (err) { if (err) throw err; }',
             null,
             null ] } } ] }
